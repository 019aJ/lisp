#lang racket
(require racket/include)
(require  "1.2.4_Power.rkt")
;Упражнение 2.4.
;Вот еще одно процедурное представление для пар. Проверьте для этого представления, что при
;любых двух объектах x и y (car (cons x y)) возвращает x.Каково соответствующее определение cdr?
(define (cons x y)
(lambda (m) (m x y)))
(define (car z)
(z (lambda (p q) p)))
(define (cdr z)
(z (lambda (p q) q)))


;Упражнение 2.5.
;Покажите, что можно представлять пары неотрицательных целых чисел, используя только числа
;и арифметические операции, если представлять пару a и b как произведение 2^a*3^b. Дайте соответ-
;ствующие определения процедур cons, car и cdr.

(define (cons-2 a b) (* (fast-expt 2 a) (fast-expt 3 b)))
(define (car-2 p)
 (define (div p)
   (if (= (remainder p 3) 0) (div (/ p 3)) p)
 )
 (log (div p) 2)
)
(define (cdr-2 p)
 (define (div p)
  (if (even? p) (div (/ p 2)) p)
 )
 (log (div p) 3)
)

;Упражнение 2.6.
;Если представление пар как процедур было для Вас еще недостаточно сумасшедшим, то заметьте,
;что в языке, который способен манипулировать процедурами, мы можем обойтись и без чисел (по
;крайней мере, пока речь идет о неотрицательных числах), определив 0 и операцию прибавления 1
;так:
(define zero (lambda (f) (lambda (x) x)))
(define (add-1 n) (lambda (f) (lambda (x) (f ((n f) x)))))

;Такое представление известно как числа Чёрча (Church numerals), по имени его изобретателя,
;Алонсо Чёрча, того самого логика, который придумал lambda-исчисление.
;Определите one (единицу) и two (двойку) напрямую (не через zero и add-1). (Подсказ-
;ка: вычислите (add-1 zero) с помощью подстановки.) Дайте прямое определение процедуры
;сложения + (не в терминах повторяющегося применения add-1).

(define (one ) (lambda (f) (lambda (x) (f x))))
(define (inc a) (+ a 1))
(define (add-church m n)
   (lambda (f) (lambda (x) ((m f) ((n f) x)))))