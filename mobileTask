(define (f3 n)
  (cond ((< n 3) n)
        (else (+ (f3 (- n 1)) (f3 (- n 2)) (f3 (- n 3))))
  ))

(define (f3inner x y z n)
  (cond ((= n 1) z)
        (else  (f3inner (+ x y z) x y  (- n 1))))
  )

(define (f3v2 n)
  (f3inner 3 2 1 n)
  )

(define (start-line-value-inner prevLineNumber prevStartValue)
  (if (= prevLineNumber 0) prevStartValue
      (start-line-value-inner (- prevLineNumber 1) (+ prevStartValue prevLineNumber))))

(define (line-count lineStartValue lineNumber inputValue)
  (if (>= lineStartValue inputValue)
      (- lineNumber 1)
   (line-count (+ lineStartValue lineNumber) (+ lineNumber 1) inputValue)))

(define (left-index lineNumber inputValue)
  (- inputValue  lineNumber)
)

(define (right-index lineNumber inputValue)
  (- inputValue lineNumber -1)
)

(define (prev-start-line-value lineNumber)
 (start-line-value-inner (- lineNumber 2) 1)
)

(define (start-line-value lineNumber)
 (start-line-value-inner (- lineNumber 1) 1)
)

(define (pascal-inner lineNumber lineStartValue inputValue)
  (cond ((= inputValue lineStartValue) 1)
        ((= (+ lineStartValue lineNumber -1) inputValue) 1)
        ((= lineNumber 1) 1)
        (else (+ (pascal-inner (- lineNumber 1)  (prev-start-line-value lineNumber)  (left-index lineNumber inputValue)) (pascal-inner (- lineNumber 1)  (prev-start-line-value lineNumber)  (right-index lineNumber inputValue)) ))))

(define (pascal n)
  (define lineNumber (line-count 0 1 n))
  (pascal-inner lineNumber (start-line-value lineNumber) n)
)

(define (pow a b n)
  (cond ((= n 1) (* a b))
    ((= n 2) (* a b b))
    ((even? n) (pow a (* b b ) (/ n 2)))
    (else (pow (* a b) b (- n 1))))
)

(define (mult-log rem a b)
(cond((= b 0) 0)
     ((= b 1) (+ rem a))
     ((= b 2) (+ rem (double a)))
     ((even? b) (mult-log rem (double a) (halve b 2)))
     (else (mult-log (+ a rem) a (- b 1))
)
)

(define (square a)
(* a a))
(define (remainder a b)
(- a (* (floor (/ a b)) b)))


(define (smallest-divisor n)
(find-divisor n 2))
(define (find-divisor n test-divisor)
(cond ((> (square test-divisor) n) n)
((divides? test-divisor n) test-divisor)
(else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
(= (remainder b a) 0))

(define (prime? n)
(= n (smallest-divisor n)))

(define (date2runtime date)
  (+  
     (* (date-hour date) 60 60 1000) 
     (* (date-minute date) 60 1000) 
     (* (date-second date) 1000) 
     (date-millisecond date)
  )
)

(define (runtime) (date2runtime (current-date)))

(define (report-prime elapsed-time)
(display " *** ")
(display elapsed-time)
(= 1 1))

(define (start-prime-test n start-time)
(if (prime? n)
(report-prime (- (runtime) start-time))
(= 1 0)))

(define (timed-prime-test n)
(newline)
(display n)
(start-prime-test n (runtime)))



(define (search-for-primes start finish n)
  (cond ((even? start) (search-for-primes ( + start 1) finish n))
        ((= n 0) (newline) (display "finish"))
        ((>= start finish) (newline) (display "finish"))
        ((timed-prime-test start) (search-for-primes ( + start 2) finish (- n 1)))
        (else ((search-for-primes ( + start 2) finish n)))
  )
)


(define (cube x) (* x x x))

(define (sum term a next b)
(if (> a b)
0
(+ (term a)
(sum term (next a) next b))))


(define (sum-iter term a next b)
  (define (iter a result)
    (if (> a b)
      result
      (iter (next a) (+ result (term a)))
    )
  )
  (iter a 0)
)

(define (integral f a b dx)
(define (add-dx x) (+ x dx))
(* (sum f (+ a (/ dx 2)) add-dx b)
dx))

(define (sum-sympson term a next b step koef)
(display ( * (term a) (koef step)))
(newline)
(if (> a b)
0
(+ ( * (term a) (koef step))
(sum-sympson term (next a) next b (inc step) koef))))

(define (h a b n)
  (/ (- b a) n)
)

(define (yk f a b n k)
  (f (+ a (* k (h a b n))))
)

(define (koef-sympson k a b)
  (cond ((= k 0) 1)
        ((= a b) 1) 
        ((even? k) 2)
        (else 4)
  )
)

(define (sympson f a b n)
  (define (next-sympson x) 
    (+ x (h a b n)))
  (define (koef-sympson k)
    (cond ((= k 0) 1)
          ((= k n) 1) 
          ((even? k) 2)
          (else 4)
    )
  )  
  (* 1 (sum-sympson f a next-sympson b 0 koef-sympson))
)


(define (product term a next b)
  (define (iter a result)
    (if (> a b)
      result
      (iter (next a) (* result (term a)))
    )
  )
  (iter a 1)
)

(define (accumulate combiner null-value term a next b)
  (define (iter a result)
      (if (> a b)
        result
        (iter (next a) (combiner result (term a)))
      )
    )
    (iter a null-value)
)

(contfrac (lambda (i) 1.0) (lambda (i) (cond (let ((rem (remainder i 3))  )))) 12)



(define (cubic a b c)
  (lambda (v)(+ (cube v) (* a (square v)) (* b v) c))
)

(define (double f)
  (lambda (x) (f (f x)))
)

(define (compose f g)
  (lambda (x) (f (g x)))
)

(define (repeated f n)
  (if (= n 1) (lambda (x) (f x))
    (compose f (repeated f (- n 1)))
  )
)

(define (smooth f)
  (lambda (x) (/ (+ (f x) (f (+ x dx)) (f (- x dx))) 3))
)

(define (n-smooth f n)
  (repeated (smooth f) n)
)

(define (n-sqrt x n)
  (fixed-point-of-transform 
    (lambda (y) (/ x (power y (- n 1))))
    (repeated average-damp 2)
    1.0
  )
)


(define (deriv g)
(lambda (x)
(/ (- (g (+ x dx)) (g x))
dx)))

(define (cube x) (* x x x))
(define (square a)
(* a a))
(define (power x n)
  (define (power-inner x n rem)
    (cond ((= n 0) rem)
          (else (power-inner x (- n 1) (* rem x)))
    )
  )
  (power-inner x n 1)
)
(define (average a b)
  (/ (+ a b) 2))
(define (remainder a b)
(- a (* (floor (/ a b)) b)))
(define (average-damp f)
(lambda (x) (average x (f x))))

(define dx 0.00001)

(define (newton-transform g)
(lambda (x)
(- x (/ (g x) ((deriv g) x)))))

(define (newtons-method g guess)
(fixed-point (newton-transform g) guess))

(define (fixed-point-of-transform g transform guess)
(fixed-point (transform g) guess))

(define (sqrt x)
(fixed-point-of-transform (lambda (y) (/ x y))
average-damp
1.0))

(define (sqrt x)
(fixed-point-of-transform (lambda (y) (- (square y) x))
newton-transform
1.0))

(define (gcd a b)
(if (= b 0)
a
(gcd b (remainder a b))))

(define (reverse x)
  (define (inner-dr x y)
    (if (null? x)
      y
      (let  ((el (car x)))
      (inner-dr (cdr x) (cons el y) ))
    )
  )
  (inner-dr x '())
)

(define (deep-reverse x)
  (define (inner-dr x y)
    (if (null? x)
      y
      (let  ((el (car x)))
        (if (list? el)
          (inner-dr (cdr x) (cons (inner-dr el '()) y))
          (inner-dr (cdr x) (cons el y))
        )
      )
    )
  )
  (inner-dr x '())
)


(define (fringe x)
  (define (inner-fringe x y)
    (if (null? x)
      y
      (let  ((el (car x)))
        (if (list? el)
          (inner-fringe (cdr x) (append y (inner-fringe el '())))
          (inner-fringe (cdr x) (append y (list el)))
        )
      )
    )
  )
  (inner-fringe x '())
)


(define (make-mobile left right)
  (list left right)
)

(define (make-branch length structure)
  (list length structure)
)

(define (left-branch mobile)
  (car mobile)
)  

(define (right-branch mobile)
  (cdr mobile)
)  

(define (branch-length branch)
  (car branch)
)

(define (branch-structure branch)
  (cdr branch)
)

(define (branch? x)
  (list? (car x))
)

(define (mobile? x)
  (and 
    (list? x)
    (not (null? x))
    (list? (car x))
    (list? (cdr x))
  )
)

(define (load? node)
  (null? (cdr node))
)

(define (total-weight mobile)
  (define (inner-tw m weight)
    (cond ((null? m) weight)
      ((mobile? m) 
        (let  ((lb (left-branch m)) (rb (right-branch m)))
          (inner-tw rb (inner-tw lb weight))
        )
      )  
      (else 
        (inner-tw (branch-structure m) (+ weight (branch-length m)))
      )
    )
  )
  (inner-tw mobile 0)
)

(define mobile 
  (make-mobile 
    (make-branch 1 
      (make-mobile 
        (make-branch 2 
          (make-mobile 
            (make-branch 3 
              (make-mobile (make-branch 4 `()) `())
            )
            (make-branch 5 
              (make-mobile 
                (make-branch 6 
                  (make-mobile `() (make-branch 8 `()))
                )
                (make-mobile (make-branch 7 `()) `())
              )
            )
          )
        ) 
        `()
      )
    ) 
    (make-branch 9 
      (make-mobile 
        (make-branch 1
          (make-mobile 
            `()
            (make-branch 3 
              (make-mobile 
                (make-branch 6
                  (make-mobile `() (make-branch 7 `()))
                )
                `()
              )
            )
          )
        )
        (make-branch 2 
          (make-mobile
            (make-branch 4 `())
            (make-branch 5 `()) 
          )
        )
      )
    )
  )
)