#lang racket
(define *the-table* (make-hash));make THE table
(define (put key1 key2 value) (hash-set! *the-table* (list key1 key2) value));put
(define (get key1 key2) (hash-ref *the-table* (list key1 key2) #f));get

(define *the-coercion-table* (make-hash));make THE table
(define (put-coercion key1 key2 value) (hash-set! *the-coercion-table* (list key1 key2) value));put
(define (get-coercion key1 key2) (hash-ref *the-coercion-table* (list key1 key2) #f));get


(define (attach-tag type-tag contents)
  (if (number? contents)
       contents
      (cons type-tag contents)
  )
 )
(define (type-tag datum)
  (cond ((pair? datum)(car datum))
       ((number? datum) 'scheme-number) 
      (error "Некорректные помеченные данные -- TYPE-TAG" datum)
  )
)
(define (contents datum)
  (cond ((pair? datum)(cdr datum))
        ((number? datum) datum) 
      (error "Некорректные помеченные данные -- CONTENTS" datum)
   )
 )
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
        (apply proc (map contents args))
        (if (= (length args) 2)
          (let ((type1 (car type-tags)) (type2 (cadr type-tags)) (a1 (car args)) (a2 (cadr args)))
                                          (if (eq? type1 type2)
                                              (apply-generic op a1 a2)
            (let ((t1->t2 (get-coercion type1 type2)) (t2->t1 (get-coercion type2 type1)))
              (cond 
                (t1->t2 (apply-generic op (t1->t2 a1) a2))
                (t2->t1 (apply-generic op a1 (t2->t1 a2)))
                (else (error "Нет метода для этих типов" (list op type-tags)))
              )
            )
                                           )
          )
          (error "Нет метода для этих типов"(list op type-tags))
        )
      )
    )
  )
)

(define (square a)(* a a))

;декартовы координаты
(define (install-rectangular-package)

  ; внутренние процедуры

  (define (real-part z) (car z))

  (define (imag-part z) (cdr z))

  (define (make-from-real-imag x y) (cons x y))

  (define (magnitude z) (sqrt (+ (square (real-part z))(square (imag-part z)))))

  (define (angle z) (atan (imag-part z) (real-part z)))

  (define (make-from-mag-ang r a) (cons (* r (cos a)) (* r (sin a))))

  ; интерфейс к остальной системе

  (define (tag x) (attach-tag 'rectangular x))

  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular (lambda (r a) (tag (make-from-mag-ang r a))))

  'done
)

;Полярные координаты
(define (install-polar-package)
  ; внутренние процедуры

  (define (magnitude z) (car z))

  (define (angle z) (cdr z))

  (define (make-from-mag-ang r a) (cons r a))

  (define (real-part z)   (* (magnitude z) (cos (angle z))))

  (define (imag-part z) (* (magnitude z) (sin (angle z))))

  (define (make-from-real-imag x y) (cons (sqrt (+ (square x) (square y))) (atan y x)))

  ; интерфейс к остальной системе

  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar (lambda (r a) (tag (make-from-mag-ang r a))))

  'done
)



;Действительные числа
(define (install-scheme-number-package)
  (define (tag x)  (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)  (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)  (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)  (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)  (lambda (x y) (tag (/ x y))))
  (put 'equ? '(scheme-number scheme-number)  (lambda (x y) (= x y)))
  (put 'zero? '(scheme-number)  (lambda (x) (= x 0)))
  (put 'make 'scheme-number  (lambda (x) (tag x)))
  (put 'exp '(scheme-number scheme-number) (lambda (x y) (tag (expt x y))))
  (put 'raise '(scheme-number) (lambda (x) (make-rational x 1)))
  (put 'project '(scheme-number) (lambda (x) #f))
  'done
)


;Рациональные числа
(define (install-rational-package)
  ; внутренние процедуры
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
    (cons (/ n g) (/ d g)))
  )
  (define (add-rat x y)(make-rat (+ (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y))))
  (define (sub-rat x y)(make-rat (- (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y))))
  (define (mul-rat x y)(make-rat (* (numer x) (numer y))  (* (denom x) (denom y))))
  (define (div-rat x y)(make-rat (* (numer x) (denom y))  (* (denom x) (numer y))))
  ; интерфейс к остальной системе
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational) (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational) (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational) (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational) (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational (lambda (n d) (tag (make-rat n d))))
  (put 'equ? '(rational rational)  (lambda (x y) (and (= (numer x) (numer y )) (= (denom x) (denom y )))))
  (put 'zero? '(rational) (lambda (x)  (and (= (numer x) 0) (= (denom x) 1))))
  (put 'raise '(rational) (lambda (x) (make-complex-from-real-imag (tag x) 0)))
  (put 'project '(rational) (lambda (x) (if (= (denom x) 1) (numer x) #f)))
  'done
)


;Комплексные числа
(define (install-complex-package)
  ; процедуры, импортируемые из декартова и полярного пакетов
  (define (make-from-real-imag x y) ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a) ((get 'make-from-mag-ang 'polar) r a))
  (define (real-part z) (apply-generic 'real-part z))
  (define (imag-part z) (apply-generic 'imag-part z))
  (define (angle z) (apply-generic 'angle z))
  (define (magnitude z) (apply-generic 'magnitude z))
  ; внутренние процедуры
  (define (add-complex z1 z2) (make-from-real-imag (add (real-part z1) (real-part z2)) (add (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2) (make-from-real-imag (sub (real-part z1) (real-part z2)) (sub (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2) (make-from-mag-ang (mul (magnitude z1) (magnitude z2)) (add (angle z1) (angle z2))))
  (define (div-complex z1 z2) (make-from-mag-ang (div (magnitude z1) (magnitude z2)) (sub (angle z1) (angle z2))))
  ; интерфейс к остальной системе
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex) (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex) (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex) (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex) (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag 'complex (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'real-part '(complex) (lambda (z)(real-part z)))
  (put 'imag-part '(complex) (lambda (z)(imag-part z)) )
  (put 'magnitude '(complex) (lambda (z)(magnitude z)))
  (put 'angle '(complex) (lambda (z)(angle z)))
  (put 'equ? '(complex complex)  (lambda (x y) (and (= (real-part x) (real-part y )) (= (imag-part x) (imag-part y )))))
  (put 'zero? '(complex)  (lambda (x)  (and (= (real-part x) 0) (= (imag-part x) 0))))
  (put 'project '(complex)  (lambda (x)  (if (= (imag-part x) 0) (real-part x) #f)))
  'done
)
;Обобщенные арифметические процедуры определяются следующим образом:
(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))
(define (equ? x y) (apply-generic 'equ? x y))
(define (zero? x) (apply-generic 'zero? x))
(define (exp x y) (apply-generic 'exp x y))
(define (make-rational n d) ((get 'make 'rational) n d))
(define (make-scheme-number n)((get 'make 'scheme-number) n))
(define (make-complex-from-real-imag x y)((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)((get 'make-from-mag-ang 'complex) r a))
(define (raise x) (apply-generic 'raise x))
(define (project x) (apply-generic 'project x))
;Приведение типов
(define (scheme-number->complex n)(make-complex-from-real-imag (contents n) 0))
(put-coercion 'scheme-number 'complex scheme-number->complex)
(define (scheme-number->rational n)(make-rational (contents n) 1))
(put-coercion 'scheme-number 'rational scheme-number->rational)
(define (rational->complex n)(make-complex-from-real-imag n 0))
(put-coercion 'rational 'complex rational->complex)
(install-polar-package)
(install-rectangular-package)
(install-scheme-number-package)
(install-rational-package)
(install-complex-package)

(define (apply-op-to-many  op  proc args)
  (if proc
    (let ((res (apply proc (map contents (list (car args) (cadr args))))))
      (if (= (length args) 2)
           res
          (apply-op-to-many  op proc (append (list res) (cddr args))))
     )
    (error "Нет метода для этих типов" (list op args))
  )
)


;Упражнение 2.81.
;Хьюго Дум заметил, что apply-generic может пытаться привести аргументы к типу друг друга
;даже тогда, когда их типы и так совпадают. Следовательно, решает он, нам нужно вставить
;в таблицу приведения процедуры, которые «приводят» аргументы каждого типа к нему самому.
;Например, в дополнение к приведению scheme-number->complex, описанному выше, он бы написал еще:
(define (scheme-number->scheme-number n) n)
(define (complex->complex z) z)
;(put-coercion 'scheme-number 'scheme-number scheme-number->scheme-number)
;(put-coercion 'complex 'complex complex->complex)
;а. Если установлены процедуры приведения типов, написанные Хьюго, что произойдет, когда
;apply-generic будет вызвана с двумя аргументами типа scheme-number или двумя аргументами типа complex для операции, которая не находится в таблице для этих типов? Допустим,
;процедуру возведения в степень. Что произойдет, если мы позовем exp с двумя комплексными числами в качестве аргументов?
(define c_a (make-complex-from-real-imag 1 3))
(define c_b (make-complex-from-real-imag 1 5))
(add c_a c_b)
;Произошло зацикливание
;(exp c_a c_b)

;б. Прав ли Хьюго, что нужно что-то сделать с приведением однотипных аргументов, или все и
;так работает правильно?
;и так работает
;в. Измените apply-generic так, чтобы она не пыталась применить приведение, если у обоих
;аргументов один и тот же тип.

;Упражнение 2.82.
;Покажите, как обобщить apply-generic так, чтобы она обрабатывала приведение в общем
;случае с несколькими аргументами. Один из способов состоит в том, чтобы попытаться сначала
;привести все аргументы к типу первого, потом к типу второго, и так далее. Приведите пример,
;когда эта стратегия (а также двухаргументная версия, описанная выше) недостаточно обща. (Подсказка: рассмотрите случай, когда в таблице есть какие-то подходящие операции со смешанными
;типами, но обращения к ним не произойдет.)

(define (apply-generic-many-args op . args)
  (define (cast-inner list-args list-type-tags new-args cast-type)
    (cond (
      (null? list-args) new-args)
      (else
       (let ((current-type (car list-type-tags)) (current-value (car list-args)) (coercion (get-coercion (car list-type-tags) cast-type)))
        (cond
          ((eq? current-type cast-type) (cast-inner (cdr list-args) (cdr list-type-tags) (append new-args (list current-value)) cast-type))
          (coercion (cast-inner (cdr list-args) (cdr list-type-tags) (append new-args  (list(coercion current-value))) cast-type))
          (else #f)
         )
        )
       )
     )
   )
  (define (find-first-cast type-tags args tail-types)
    (if (null? tail-types)
        ;все перебрали, не нашли рабочее приведение
        #f
        (let ((coerces-args (cast-inner args type-tags '() (car tail-types))))
          (if coerces-args
              ;приведение прошло успешно, возвращаем приведенные аргумены
              coerces-args
              ;не получилось - проверяем следующий тип
              (find-first-cast type-tags args (cdr tail-types))
           )
         )
     )
   )

 (let ((type-tags (map type-tag args)))
  (cond
    ((= (length args) 2)
     (let ((proc (get op type-tags)))
       (if proc (apply proc (map contents args))
           (let ((type1 (car type-tags)) (type2 (cadr type-tags)) (a1 (car args)) (a2 (cadr args)))
             (if (eq? type1 type2) (apply-generic op a1 a2)
                 (let ((t1->t2 (get-coercion type1 type2)) (t2->t1 (get-coercion type2 type1)))
                   (cond 
                     (t1->t2 (apply-generic-many-args op (t1->t2 a1) a2))
                     (t2->t1 (apply-generic-many-args op a1 (t2->t1 a2)))
                     (else (error "Нет метода для этих типов" (list op type-tags)))
                     )
                   )
                 )
             )        
           )
       )
     )
     ((= (length args) 1)
      (let ((proc (get op type-tags)))
       (if proc (apply proc (map contents args))  (error "Нет метода для этих типов" (list op type-tags)))
       ))
     (else
       ;приводим все к одному типу
        (let ((coerced-values (find-first-cast type-tags args type-tags)))
             (if coerced-values
                 (let ((type-tags (map type-tag coerced-values)))
                  (let ((proc (get op (list (car type-tags) (cadr type-tags)))))
                   ( apply-op-to-many op proc coerced-values)
                  ))
                 (error "Нет метода для этих типов"(list op type-tags))
              )
    )
      )
   )
 )
)

(apply-generic-many-args 'add  1 2 (make-complex-from-real-imag 1 3)(make-complex-from-real-imag 5 2) )

;Упражнение 2.83.
;Предположим, что Вы разрабатываете обобщенную арифметическую систему для работы с башней
;типов, показанной на рис. 2.25: целые, рациональные, действительные, комплексные. Для каждого
;из типов (кроме комплексного), разработайте процедуру, поднимающую объект на один уровень
;в башне. Покажите, как ввести обобщенную операцию raise, которая будет работать для всех
;типов (кроме комплексных чисел)
(raise 1)
(raise (make-rational 1 1))

;Упражнение 2.84.
;Используя операцию raise из упражнения 2.83, измените процедуру apply-generic так, чтобы она приводила аргументы к одному типу путем последовательного подъема, как описано в
;этом разделе. Потребуется придумать способ проверки, какой из двух типов выше по башне. Сделайте это способом, «совместимым» с остальной системой, так, чтобы не возникало проблем при
;добавлении к башне новых типов.

 (define (level type) 
   (cond ((eq? type 'scheme-number) 0) 
         ((eq? type 'rational) 1) 
         ((eq? type 'complex) 2) 
         (else (error "Invalid type: LEVEL" type)))) 
     
(define (apply-generic-level-up op . args)

  (define (find-max-level type-tags current-max)
    (if 
      (null? type-tags) current-max
      (let ((current-type-level (level (car type-tags))))
        (if (> current-type-level current-max) 
          (find-max-level (cdr type-tags) current-type-level)
          (find-max-level (cdr type-tags) current-max)
        )
      )
    )
  )
  
  (define (cast-value value cast-type)
    (let ((current-type-level (level (car (map type-tag (list value))))))
       (if (< current-type-level cast-type) 
         (cast-value (raise value) cast-type)
         value
       )
    )
  )  
  (define (cast-all list-args new-args cast-type)
    (if (null? list-args) 
      new-args
      (cast-all (cdr list-args) (append new-args (list (cast-value (car list-args) cast-type))) cast-type)
     )
  )



 (let ((type-tags (map type-tag args)))
  (cond
    ((= (length args) 1)
     (let ((proc (get op type-tags)))
       (if proc 
         (apply proc (map contents args))
         (error "Нет метода для этих типов" (list op type-tags)))
     )
    )
    (else
       ;ищем тип для приведения
      (let ((coerced-values (cast-all args '() (find-max-level type-tags 0))))
        (let ((type-tags (map type-tag coerced-values)))
           (let ((proc (get op (list (car type-tags) (cadr type-tags)))))
             (apply-op-to-many op proc coerced-values)
           )
	)
      )
    )
   )
 )
)
(define x1 3)
(define x2 (make-rational 1 1))
(define x3 (make-rational 3 2))
(define x4 (make-complex-from-real-imag 1 1))
(define x5 (make-complex-from-real-imag 5 0))
(define x6 (make-complex-from-real-imag (make-rational 1 1) 0))
(define x7 (make-complex-from-real-imag (make-rational 1 2) 0))
(apply-generic-level-up 'add x1 x2 x3 x4)
(apply-generic-many-args 'add x1 x2 x3 x4)

;Упражнение 2.85.
;В этом разделе упоминался метод «упрощения» объекта данных путем спуска его по башне насколько возможно вниз. Разработайте процедуру drop, которая делает это для башни, описанной
;в упражнении 2.83. Ключ к задаче состоит в том, что надо решить некоторым общим способом,
;можно ли понизить объект в типе. Например, комплексное число 1.5+0i можно опустить до real,
;комплексное число 1 + 0i до integer, а комплексное число 2 + 3i никуда понизить нельзя. Вот
;план того, как определить, можно ли понизить объект: для начала определите обобщенную операцию project, которая «сталкивает» объект вниз по башне. Например, проекция комплексного
;числа будет состоять в отбрасывании его мнимой части. Тогда число можно сдвинуть вниз в том
;случае, если, спроецировав его, а затем подняв обратно до исходного типа, мы получаем нечто,
;равное исходному числу. Покажите как реализовать эту идею в деталях, написав процедуру drop,
;которая опускает объект как можно ниже. Потребуется разработать различные операции проекции53 и установить project в системе в качестве обобщенной операции. Вам также потребуется
;обобщенный предикат равенства, подобный описанному в упражнении 2.79. Наконец, используя
;drop, перепишите apply-generic из упражнения 2.84, чтобы она «упрощала» свои результаты.

(define (drop x)
  (let ((projected (project x)))
    (if projected
		(drop projected)
		x
	)
  )
)
(display "Процедура drop")
(newline)
(display x1)
(display " -> ")
(display(drop x1))
(newline)
(display x2)
(display " -> ")
(display(drop x2))
(newline)
(display x3)
(display " -> ")
(display(drop x3))
(newline)
(display x4)
(display " -> ")
(display(drop x4))
(newline)
(display x5)
(display " -> ")
(display(drop x5))
(newline)
(display x6)
(display " -> ")
(display(drop x6))
(newline)
(display x7)
(display " -> ")
(display(drop x7))
(newline)