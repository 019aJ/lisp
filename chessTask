(define (accumulate op initial sequence)
(if (null? sequence)
initial
(op (car sequence)
(accumulate op initial (cdr sequence)))))


(define (count-leaves t)
  (accumulate (lambda (x y) (+ y x)) 
    0 
    (map (lambda (v) 1) (enumerate-tree t))
  )
)

(define (count-leaves-old x)
(cond ((null? x) 0)
((not (pair? x)) 1)
(else  (+ (count-leaves-old (car x))
(count-leaves-old (cdr x))))))

(define (enumerate-tree tree)
(
  cond ((null? tree) `())
  ((not (pair? tree)) (list 1))
  (else (append (enumerate-tree (car tree))
  (enumerate-tree (cdr tree))))
)
)

(define tr 
(list 1
  (list 2 (list 3 4) 5)
  (list 6 7)
)
)

(define (accumulate-n op init seqs)
  (if (or (null? seqs) (null? (car seqs)))
  `()
  (cons (accumulate op init (map (lambda (x) (car x)) seqs))
  (accumulate-n op init (map (lambda (x) (cdr x)) seqs))))
)

(define m
(list (list 1 2 3) (list 4 5 6) (list 7 8 9))
)


(define (dot-product v w)
(accumulate + 0 (map * v w))
)

(define (matrix-*-vector m v)
(map (lambda (x) (dot-product v x) ) m))

(define (transpose mat)
(accumulate-n (lambda (x y) (append (list x) y) ) `() mat)
)

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map 
      (lambda (row) 
        (matrix-*-vector cols row) 
      ) 
      m
    )
  )
)
(define (square a)
(* a a))
(define (remainder a b)
(- a (* (floor (/ a b)) b)))

(define (next a)
(cond ((= a 2) 3)
      (else (+ a 2))
      )
)

(define (smallest-divisor n)
(find-divisor n 2))

(define (find-divisor n test-divisor)
(cond ((> (square test-divisor) n) n)
((divides? test-divisor n) test-divisor)
(else (find-divisor n (next test-divisor)))))

(define (divides? a b)
(= (remainder b a) 0))

(define (prime? n)
(= n (smallest-divisor n)))
(define (fold-left op initial sequence)
(define (iter result rest)
(if (null? rest)
result
(iter (op result (car rest))
(cdr rest))))
(iter initial sequence))

(define (fold-right op initial sequence)
(display initial)
(newline)
(if (null? sequence)
initial
(op (car sequence) (fold-right op initial (cdr sequence)))
))

(define sequence (list 1 2 3))

(define (reverse-rf sequence)
(fold-right (lambda (x y) (append y (list x))) `() sequence))

(define (reverse-lf sequence)
(fold-left (lambda (x y) (append (list y) x)) `() sequence))

(define (enumerate-interval low high)
  (if (> low high)
      `()
      (cons low (enumerate-interval (+ low 1) high))))

(define (prime-sum? pair)
(prime? (+ (car pair) (cadr pair))))

(define (make-pair-sum pair)
(list (car pair) (cadr pair) (+ (car pair) (cadr pair))))

(define (flatmap proc seq)
(accumulate append (list) (map proc seq)))

(define (unique-pairs n)
(flatmap
        (lambda (i)
        (map (lambda (j) (list i j))
        (enumerate-interval 1 (- i 1))))
        (enumerate-interval 1 n)
      )
)

(define (unique-trio n)
(flatmap
        (lambda (i)
          (map (lambda (j) (append j (list i)))
            (unique-pairs (- i 1))
          )
        )
        (enumerate-interval 1 n)
      )
)

(define (prime-sum-pairs n)
  (map make-pair-sum
    (filter prime-sum?
      (unique-pairs n)
    )
  )
)

(define (make-trio-sum trio)
(list (car trio) (cadr trio) (caddr trio) (+ (car trio) (cadr trio) (caddr trio)))
)

(define (less-than-s n s)
  (define (sum-equal? trio)
    (= (+ (car trio) (cadr trio) (caddr trio)) s)
  )
  (map make-trio-sum
    (filter sum-equal?
      (unique-trio n)
    )
  )
)

  (define (safe? column positions)
    (define (rec-safe pos counter)
      (if 
        (null? pos) #t
        (let  ((c (car pos)))
           (if (or (= column c) (= column (+ c counter)) (= column (- c counter)))
            #f
            (rec-safe (cdr pos) (+ counter 1))
           ) 
        )
      ) 
    )
    (display "im here! ")
    (display positions)
    (display " ")
    (display column)
    (newline)
    (rec-safe positions 1)
  )

(define (queens board-size)
  (define (empty-board)
  `()
  )
  (define (adjoin-position new-row k rest-of-queens)
    (append rest-of-queens (append new-row list(k)) )
  )
  (define (queen-cols k)
    (if (= k 0)
      (list empty-board)
      (filter (lambda (positions) (safe? k positions))
        (flatmap
          (lambda (rest-of-queens)
            (map 
              (lambda (new-row)
                (adjoin-position new-row k rest-of-queens))
              (enumerate-interval 1 board-size)
            )
          )
          (queen-cols (- k 1))
        )
      )
    )
  )
  (queen-cols board-size)
)

  (define (my-safe? positions)
    (safe? (car positions)(cdr positions))
  )

(define (my-queens board-size)
  (define (adjoin-position new-row rest-of-queens)
    (append (list new-row) rest-of-queens)
  )
  (define (queen-cols k)
    (if (= k 0)
      (list (list))
      (filter (lambda (positions) (my-safe? positions))
        (flatmap
          (lambda (rest-of-queens)
            (map 
              (lambda (new-row)
                (adjoin-position new-row rest-of-queens))
              (enumerate-interval 1 board-size)
            )
          )
          (queen-cols (- k 1))
        )
      )
    )
  )
  (queen-cols board-size)
)
